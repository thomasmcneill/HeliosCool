


// TODO: Configure your WiFi here
#define WIFI_SSID "<your ssid goes here>"
#define WIFI_PSK  "<your pre-shared key goes here>"


// We will use wifi
#include <WiFi.h>

// Includes for the server
// Note: We include HTTPServer and HTTPSServer
#include <HTTPSServer.hpp>
#include <HTTPServer.hpp>
#include <SSLCert.hpp>
#include <HTTPRequest.hpp>
#include <HTTPResponse.hpp>
// The HTTPS Server comes in a separate namespace. For easier use, include it here.
using namespace httpsserver;

// Create an SSL certificate object from the files included above
SSLCert *cert;

HTTPSServer *secureServer;
HTTPServer *insecureServer; 

// Declare some handler functions for the various URLs on the server
void handleRoot(HTTPRequest * req, HTTPResponse * res);
void handle404(HTTPRequest * req, HTTPResponse * res);

void setup() {
  // For logging
  Serial.begin(115200);
  
  createSSL();
  ConnectWiFi();
 SetupHTTPd();
  

  xTaskCreatePinnedToCore(serverTask, "httpd", 6144, NULL, 1, NULL, 1);
  
}
void loop()
{
  while(1==1) {
      Serial.println("loop()");
      delay(5000);
  }
}
void createSSL()
{
  Serial.println("Creating certificate...");
   
  cert = new SSLCert();
 
  int createCertResult = createSelfSignedCert(
    *cert,
    KEYSIZE_2048,
    "CN=myesp.local,O=acme,C=US");
   
   
  if (createCertResult != 0) {
    Serial.printf("Error generating certificate");
    return; 
  }
 
  Serial.println("Certificate created");
  
}
void SetupHTTPd()
{
  secureServer = new HTTPSServer(cert);
  insecureServer = new HTTPServer();

  // For every resource available on the server, we need to create a ResourceNode
  // The ResourceNode links URL and HTTP method to a handler function
  ResourceNode * nodeRoot = new ResourceNode("/", "GET", &handleRoot);
  ResourceNode * node404  = new ResourceNode("", "GET", &handle404);

  // Add the root node to the servers. We can use the same ResourceNode on multiple
  // servers (you could also run multiple HTTPS servers)
  secureServer->registerNode(nodeRoot);
  insecureServer->registerNode(nodeRoot);

  // We do the same for the default Node
  secureServer->setDefaultNode(node404);
  insecureServer->setDefaultNode(node404);
 
  Serial.println("Starting HTTPS server...");
  secureServer->start();
  Serial.println("Starting HTTP server...");
  insecureServer->start();
  if (secureServer->isRunning() && insecureServer->isRunning()) {
    Serial.println("Servers ready.");
  }
}
void ConnectWiFi()
{
  int counter = 0;
  IPAddress local_ip(192,168,1,1);
  IPAddress gateway(192,168,1,1);
  IPAddress subnet(255,255,255,0);

  // Connect to WiFi
  
  Serial.println("Setting up WiFi");
  WiFi.setAutoConnect(false);
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PSK);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
    counter++;
    if(counter==20)
    {
      
    
      WiFi.mode(WIFI_AP);
      WiFi.softAP("ESP32", "password");
      WiFi.softAPConfig(local_ip, gateway, subnet);
      delay(100);
      Serial.print("AP IP=");
      Serial.println(WiFi.softAPIP());
      return;
    }
  }
  Serial.print("Connected IP=");
  Serial.println(WiFi.localIP());
  
}
void serverTask(void *params) {
  // We need to call both loop functions here
  while(1==1) {
    secureServer->loop();
    insecureServer->loop();

    // Other code would go here...
    delay(10);
  }
}


void handleRoot(HTTPRequest * req, HTTPResponse * res) {
  res->setHeader("Content-Type", "text/html");

  res->println("<!DOCTYPE html>");
 
res->println("<html>");
res->println("    <head>");
res->println("   <style>");
res->println("                                :root {");
res->println("                                --h1-text-size: 4em;");
res->println("                                --h2-text-size: 3em;");
res->println("                                --h3-text-size: 2em;");
res->println("                                --h4-text-size: 1em;");
res->println("                                --control-bg-color: #4CAF50;");
res->println("                                --input-bg-color:white;");
res->println("                                --input-border-color: #000000;");
res->println("                                --control-text-color: #ffffff;");
res->println("                                --control-hover-color: #ddd;");
res->println("                                --title-bar-height: 50px;");
res->println("                                --viewport-start: 60px;");
res->println("                                --control-margin: 5px;");
res->println("                                --checkbox-checked-color: #4CAF50;");
res->println("                                --checkbox-unchecked-color: red;");
res->println("                                --side-bar-closed-width: 2em;");
res->println("                                --side-bar-open-width:  250px;");
res->println("");
res->println("                                }");
res->println("                                .jsc_hidden {");
res->println("                                visibility: hidden;");
res->println("                                }");
res->println("                                ");
res->println("                                .jsc_viewport {");
res->println("                                transition: margin-left .5s; /* If you want a transition effect */");
res->println("                                display: none;");
res->println("                                margin-top: var(--viewport-start);");
res->println("                                }");
res->println("                                .jsc_div_table");
res->println("                                {");
res->println("                                display: table;");
res->println("                                }");
res->println("                                .jsc_div_table_cell");
res->println("                                {");
res->println("                                display: table-cell;");
res->println("                                }");
res->println("                </style>");
res->println("               ");
res->println("                <script>");
res->println("                var jsc_ObjectsDict = new Object();");
res->println("");
res->println("function jsc_AddObject(id) {");
res->println("   var result           = '';");
res->println("   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';");
res->println("   var charactersLength = characters.length;");
res->println("   for ( var i = 0; i < 10; i++ ) {");
res->println("    result += characters.charAt(Math.floor(Math.random() * charactersLength));");
res->println("   }");
res->println("   result = 'jsc_' + result;");
res->println("   jsc_ObjectsDict[id] = result;");
res->println("   return result;");
res->println("}     ");
res->println("");
res->println("function jsc_toggle_display_byID(id)");
res->println("{");
res->println("   var el = document.getElementById(id);");
res->println("   if (el.style.display === \"none\") {");
res->println("      /* check to see if previous style was saved and restore it */");
res->println("      if(el.hasAttribute(\"jsc_oldstyle\"))");
res->println("      {");
res->println("         el.style.display = el.getAttribute(\"jsc_display_oldstyle\");");
res->println("      } else {");
res->println("         el.style.display = \"block\";");
res->println("      }");
res->println("   } else {");
res->println("      /* Save previous style.  It may not be block so that when he toggle it back it displays correctly. */");
res->println("");
res->println("      var oldstyle = el.style.display;");
res->println("      el.setAttribute(\"jsc_display_oldstyle\",oldstyle);");
res->println("      el.style.display = \"none\";");
res->println("   }");
res->println("}");
res->println("function jsc_hide_all_viewports()");
res->println("{");
res->println("   var divsToHide = document.getElementsByClassName(\"jsc_viewport\"); ");
res->println("   for(var i = 0; i < divsToHide.length; i++){");
res->println("      var el = divsToHide[i];");
res->println("      var oldstyle = el.style.display;");
res->println("      el.setAttribute(\"jsc_display_oldstyle\",oldstyle);");
res->println("      el.style.display = \"none\";");
res->println("   }");
res->println("");
res->println("}");
res->println("function jsc_hide_divbyID(id)");
res->println("{");
res->println("   var el = document.getElementById(id);");
res->println("   var oldstyle = el.style.display;");
res->println("   el.setAttribute(\"jsc_display_oldstyle\",oldstyle);");
res->println("   el.style.display = \"none\";");
res->println("}");
res->println("");
res->println("function jsc_show_divbyID(id)");
res->println("{");
res->println("   var el = document.getElementById(id);");
res->println("   /* check to see if previous style was saved and restore it */");
res->println("   if(el.hasAttribute(\"jsc_oldstyle\"))");
res->println("   {");
res->println("      el.style.display = el.getAttribute(\"jsc_display_oldstyle\");");
res->println("   } else {");
res->println("      el.style.display = \"block\";");
res->println("   }");
res->println("}");
res->println("");
res->println("");
res->println("function jsc_getAllDescendents(id)");
res->println("{");
res->println("   var allDescendents =  [];");
res->println("   var t = document.getElementById(id).childNodes;");
res->println("   for(let i = 0; i < t.length; i++) {");
res->println("      allDescendents.push(t[i]);");
res->println("      if(t[i].hasChildNodes)");
res->println("         jsc_getAllDescendentsRecurse(t[i], allDescendents);");
res->println("");
res->println("   }");
res->println("   return allDescendents;");
res->println("}");
res->println("function jsc_getAllDescendentsRecurse(el, descendants) {");
res->println("");
res->println("   var children = el.childNodes;");
res->println("   for(let i=0; i < children.length; i++) ");
res->println("   {");
res->println("      descendants.push(children[i]);");
res->println("      if(children[i].hasChildNodes)");
res->println("         jsc_getAllDescendentsRecurse(children[i],descendants);");
res->println("   }");
res->println("}");
res->println("");
res->println(" ");
res->println("class class_Gauge extends HTMLElement {");
res->println("  connectedCallback() {");
res->println("    var myHTML = `");
res->println("        <style>");
res->println("          #jsc_id {");
res->println("            font-size: var(--h4-text-size);");
res->println("            display: inline-block;");
res->println("            margin: var(--control-margin);");
res->println("          }");
res->println("        </style>");
res->println("                                <canvas id='jsc_id' ></canvas>");
res->println("        ");
res->println("      ");
res->println("      `;");
res->println("");
res->println("    this.jsc_id = jsc_AddObject();");
res->println("    ");
res->println("    // update the id of the div in the control");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("      ");
res->println("");
res->println("    // update any function calls back");
res->println("    var parentElementString = 'document.getElementById(\"' + this.getAttribute('id') + '\")';");
res->println("    myHTML =  myHTML.replace(/jsc_parent/g,parentElementString);");
res->println("");
res->println("                this.myCurrentValue = 0;");
res->println("                if(this.hasAttribute('value')) {");
res->println("      this.myCurrentValue = this.getAttribute('value');");
res->println("    }");
res->println("");
res->println("                this.myUpdateMS = 1000;");
res->println("    if(this.hasAttribute('updatems')) {");
res->println("      this.myUpdateMS = this.getAttribute('updatems');");
res->println("    }");
res->println("");
res->println("                this.myName = '';");
res->println("    if(this.hasAttribute('name')) {");
res->println("      this.myName = this.getAttribute('name');");
res->println("    }");
res->println("");
res->println("                this.myBackColor = 'white';");
res->println("    if(this.hasAttribute('backcolor')) {");
res->println("      this.myBackColor = this.getAttribute('backcolor');");
res->println("    }");
res->println("");
res->println("                this.myWidth = 200;");
res->println("    if(this.hasAttribute('width')) {");
res->println("      this.myWidth = this.getAttribute('width');");
res->println("    }");
res->println("");
res->println("                this.myHeight = this.myWidth;");
res->println("    if(this.hasAttribute('height')) {");
res->println("      this.myHeight = this.getAttribute('height');");
res->println("    }");
res->println("");
res->println("                this.myWatch = '';");
res->println("    if(this.hasAttribute('watch')) {");
res->println("      this.myWatch = this.getAttribute('watch');");
res->println("    }");
res->println("");
res->println("                this.myMin = 0;");
res->println("    if(this.hasAttribute('min')) {");
res->println("      this.myMin = this.getAttribute('min');");
res->println("    }");
res->println("                this.myMax = 255;");
res->println("    if(this.hasAttribute('max')) {");
res->println("      this.myMax = this.getAttribute('max');");
res->println("    }");
res->println("                this.myGuage_Range = this.myMax - this.myMin;");
res->println("                ");
res->println("                this.myLowZoneEnd =this.myMin;");
res->println("    if(this.hasAttribute('lowzoneend')) {");
res->println("      this.myLowZoneEnd = this.getAttribute('lowzoneend');");
res->println("    }");
res->println("                this.myLowZoneColor = 'orange';");
res->println("    if(this.hasAttribute('lowzonecolor')) {");
res->println("      this.myLowZoneColor = this.getAttribute('lowzonecolor');");
res->println("    }");
res->println("");
res->println("                this.myHighZoneStart = this.myMax;");
res->println("    if(this.hasAttribute('highzonestart')) {");
res->println("      this.myHighZoneStart = this.getAttribute('highzonestart');");
res->println("    }");
res->println("");
res->println("                this.myHighZoneColor = 'red';");
res->println("    if(this.hasAttribute('highzonecolor')) {");
res->println("      this.myHighZoneColor = this.getAttribute('highzonecolor');");
res->println("    }");
res->println("");
res->println("                this.myNormalColor = 'green';");
res->println("    if(this.hasAttribute('normalcolor')) {");
res->println("      this.myNormalColor = this.getAttribute('normalcolor');");
res->println("                        console.log(this.myNormalColor);");
res->println("    }");
res->println("");
res->println("                ");
res->println("                this.LowRange_ArcEnd = 180 * (this.myLowZoneEnd/this.myGuage_Range);");
res->println("                this.HighRange_ArcStart = 180 * (this.myHighZoneStart/this.myGuage_Range);");
res->println("                ");
res->println("                ");
res->println("                ");
res->println("");
res->println("    this.innerHTML = myHTML;");
res->println("                ");
res->println("                this.drawGuage();");
res->println("                setInterval(function() { this.drawGuage(); }.bind(this), this.myUpdateMS);");
res->println("               ");
res->println("               ");
res->println("");
res->println("  }");
res->println("");
res->println("        SetInternvalCallback(id)");
res->println("        {");
res->println("                var ele = document.getElementById(id); ");
res->println("                ");
res->println("                ele.setAttribute('value',window[this.getAttribute('watch')]);");
res->println("");
res->println("                ");
res->println("        }");
res->println("        gauge_degreesToRadians(degrees) ");
res->println("        {");
res->println("               ");
res->println("                return degrees * (Math.PI/180);   ");
res->println("        }");
res->println("             ");
res->println("        gauge_radiansToDegrees(radians) ");
res->println("        {");
res->println("                return radians * (180/Math.PI);");
res->println("        }");
res->println("        gauge_drawPieSlice(ctx,centerX, centerY, radius, startAngle, endAngle, color )");
res->println("        {");
res->println("                ctx.fillStyle = color;");
res->println("                ctx.beginPath();");
res->println("                ctx.moveTo(centerX,centerY);");
res->println("                ctx.arc(centerX, centerY, radius,this.gauge_degreesToRadians( startAngle),this.gauge_degreesToRadians(endAngle));");
res->println("                //console.log(this.gauge_radiansToDegrees( startAngle) + ':'+this.gauge_radiansToDegrees(endAngle));");
res->println("                ctx.closePath();");
res->println("                ctx.fill();");
res->println("        }");
res->println("        drawGuage()");
res->println("        {");
res->println("                var canvas = document.getElementById(this.jsc_id);");
res->println("                var margin = 10;");
res->println("");
res->println("                var context = canvas.getContext('2d');");
res->println("");
res->println("                context.canvas.width = this.myWidth;");
res->println("                context.canvas.height = this.myHeight;");
res->println("");
res->println("                var centerX = (canvas.width / 2);");
res->println("                var centerY =10 + canvas.height / 2;");
res->println("                var radius = (canvas.height / 2) - margin;");
res->println("                var shadedBandThickness = 0.80;");
res->println("        ");
res->println("                context.fillStyle = this.myBackColor ;");
res->println("                context.fillRect(0, 0, canvas.width, canvas.height);");
res->println("        ");
res->println("                //Draw Full Arc");
res->println("                this.gauge_drawPieSlice(context,centerX,centerY,radius,180,360,this.myNormalColor);");
res->println("                ");
res->println("                //// Draw Low Range");
res->println("                this.gauge_drawPieSlice(context,centerX,centerY,radius,180,180+this.LowRange_ArcEnd ,this.myLowZoneColor);");
res->println("        ");
res->println("                //// Draw high Range");
res->println("                this.gauge_drawPieSlice(context,centerX,centerY,radius,180+this.HighRange_ArcStart,360,this.myHighZoneColor);");
res->println("        ");
res->println("                // Cut out center");
res->println("                context.beginPath();");
res->println("                context.moveTo(centerX,centerY);");
res->println("                context.arc(centerX, centerY,radius*shadedBandThickness , 1*Math.PI,  2*Math.PI, false);");
res->println("                context.fillStyle = this.myBackColor;");
res->println("                context.closePath();");
res->println("                context.fill();");
res->println("                ");
res->println("                // Draw Min Text");
res->println("                context.fillStyle = 'black';");
res->println("                context.font = '14px Arial';");
res->println("                var textWidth = context.measureText(this.myMin+ ' ').width");
res->println("                context.fillText(this.myMin,  radius*(1-shadedBandThickness) + textWidth + margin, centerY);");
res->println("");
res->println("                // Draw max Value");
res->println("                context.fillStyle = 'black';");
res->println("                context.font = '14px Arial';");
res->println("                textWidth = context.measureText(this.myMax + ' ').width");
res->println("                context.fillText(this.myMax, canvas.width - radius*(1-shadedBandThickness) - textWidth - margin, centerY);");
res->println("");
res->println("                //Draw Max");
res->println("                textWidth = context.measureText(this.myCurrentValue).width;");
res->println("                context.fillText(this.myCurrentValue, (canvas.width/2) - (textWidth/2), centerY+14);");
res->println("                ");
res->println("                // Draw Needle");
res->println("                this.myCurrentValue = window[this.getAttribute('watch')];");
res->println("                var ArcValue = (this.myCurrentValue / this.myMax) * 180;");
res->println("                this.gauge_drawPieSlice(context,centerX,centerY,radius,180+ArcValue,180+ArcValue+1,'black');");
res->println("");
res->println("");
res->println("");
res->println("                var textHeight = 0;");
res->println("                var fontSize = 4;");
res->println("                var maxHeight = (canvas.height / 2) - 2*margin;");
res->println("                var maxWidth = canvas.width - 2*margin;");
res->println("                for(fontSize = 4;fontSize < 100;fontSize++)");
res->println("                {");
res->println("                        context.font = fontSize + 'px Arial';");
res->println("                        textHeight = context.measureText(this.myName).height;");
res->println("                        textWidth = context.measureText(this.myName+' ').width");
res->println("                ");
res->println("                        if(textHeight > maxHeight)");
res->println("                        {");
res->println("                                fontSize--;");
res->println("                                break;");
res->println("                        }        ");
res->println("                        if(textWidth > maxWidth)");
res->println("                        {");
res->println("                                fontSize--;");
res->println("                                break;");
res->println("                        }        ");
res->println("                        ");
res->println("                }");
res->println("");
res->println("                context.font = fontSize + 'px Arial';");
res->println("                textWidth = context.measureText(this.myName).width;");
res->println("                context.fillText(this.myName, (canvas.width/2) -  (textWidth/2), centerY + (centerY/2));");
res->println("");
res->println("        }");
res->println("");
res->println("");
res->println("} ");
res->println("");
res->println("customElements.define('needle-gauge', class_Gauge);");
res->println("");
res->println("");
res->println("");
res->println("");
res->println("");
res->println("class class_BasicButton extends HTMLElement {");
res->println("  connectedCallback() {");
res->println("    var myHTML = `");
res->println("        <style>");
res->println("          #jsc_id {");
res->println("            font-size: var(--h4-text-size);");
res->println("            background-color: var(--control-bg-color);");
res->println("");
res->println("            border: none;");
res->println("            color: white;");
res->println("            padding: 1.2ch 2ch;");
res->println("            text-align: center;");
res->println("            text-decoration: none;");
res->println("            display: inline-block;");
res->println("            margin: var(--control-margin);");
res->println("");
res->println("            cursor: pointer;");
res->println("          }");
res->println("        </style>");
res->println("        <button id='jsc_id' onclick='jsc_onclick'>jsc_text</button>");
res->println("      ");
res->println("      `;");
res->println("");
res->println("    this.jsc_id = jsc_AddObject();");
res->println("    ");
res->println("    // update the id of the div in the control");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("    // update the placeholder text in the control");
res->println("    myHTML =  myHTML.replace(/jsc_text/g,this.getAttribute('text'));");
res->println("    myHTML =  myHTML.replace(/jsc_onclick/g,this.getAttribute('myonclick'));");
res->println("      ");
res->println("");
res->println("    // update any function calls back");
res->println("    var parentElementString = \"document.getElementById('\" + this.getAttribute('id') + \"')\";");
res->println("    myHTML =  myHTML.replace(/jsc_parent/g,parentElementString);");
res->println("");
res->println("    this.innerHTML = myHTML;");
res->println("");
res->println("  }");
res->println("  get text() {");
res->println("    return document.getElementById(this.jsc_id);");
res->println("  }");
res->println("  set text(val) ");
res->println("  {");
res->println("    document.getElementById(this.jsc_id).text=val;");
res->println("  }");
res->println("  ");
res->println("");
res->println("");
res->println("}");
res->println("");
res->println("customElements.define('basic-button', class_BasicButton);");
res->println("");
res->println("");
res->println("");
res->println("class class_DropDown extends HTMLElement {");
res->println("  connectedCallback() {");
res->println("    var myHTML = `");
res->println("      <style>");
res->println("        .jsc_id {");
res->println("          position: relative;");
res->println("            display: inline-block;");
res->println("          margin: var(--control-margin);");
res->println("        }");
res->println("        .jsc_id_button_class {");
res->println("");
res->println("          border: 2px solid var(--input-border-color);");
res->println("          border-radius: 4px;");
res->println("            ");
res->println("          background-color: var(--input-bg-color);");
res->println("          padding: 1.2ch 2ch 1.2ch 2ch;");
res->println("          font-size: var(--h4-text-size);");
res->println("          cursor: pointer;");
res->println("        }");
res->println("        .jsc_id_dropdown {");
res->println("          position: relative;");
res->println("          display: inline-block;");
res->println("        }");
res->println("        .jsc_id_dropdown a:hover {");
res->println("          background-color: var(--control-hover-color);");
res->println("        }");
res->println("");
res->println("        .jsc_id_dropdown_content {");
res->println("          display: none;");
res->println("          position: absolute;");
res->println("          background-color: var(--control-bg-color);");
res->println("          min-width: 230px;");
res->println("          overflow: auto;");
res->println("          border: 1px solid #ddd;");
res->println("          z-index: 1;");
res->println("          max-height: 200px;");
res->println("            overflow: auto;");
res->println("        }");
res->println("        .jsc_id_dropdown_content a {");
res->println("          color: black;");
res->println("          padding: 1ch 1ch;");
res->println("          text-decoration: none;");
res->println("          display: block;");
res->println("        }");
res->println("");
res->println("        #jsc_id_input {");
res->println("          box-sizing: border-box;");
res->println("          background-image: url('searchicon.png');");
res->println("          background-position: 14px 12px;");
res->println("          background-repeat: no-repeat;");
res->println("          font-size: 16px;");
res->println("          padding: 14px 20px 12px 45px;");
res->println("          border: none;");
res->println("          border-bottom: 1px solid #ddd;");
res->println("          }");
res->println("          .jsc_id_show {");
res->println("            display: block;");
res->println("          }");
res->println("      </style>");
res->println("");
res->println("");
res->println("      <div class=\"jsc_id_dropdown\">");
res->println("        <button onclick=\"jsc_onshowfunc\" id=\"jsc_id_button\" class=\"jsc_id_button_class\">jsc_text<i class=\"fa fa-angle-down\"></i></button>");
res->println("        <div id=\"jsc_id_div_dropdown\" class=\"jsc_id_dropdown_content\">");
res->println("          ");
res->println("        </div>");
res->println("      </div>");
res->println("");
res->println("      `;");
res->println("");
res->println("");
res->println("    this.jsc_id = jsc_AddObject();");
res->println("    ");
res->println("    var onshowfunc = \"document.getElementById('\" + this.getAttribute('id') + \"').showDrop()\";");
res->println("");
res->println("");
res->println("    this.myPlaceHolder = \"\";");
res->println("    if(this.hasAttribute('placeholder')) {");
res->println("      this.myPlaceHolder = this.getAttribute('placeholder');");
res->println("    }");
res->println("");
res->println("    this.mySelectedValue=\"\";");
res->println("    if(this.hasAttribute('selectedval')) {");
res->println("      this.mySelectedValue = this.getAttribute('selectedval');");
res->println("    }");
res->println("");
res->println("");
res->println("    // for getting column identenfier for database updates");
res->println("    //if(this.hasAttribute('uniquecolumn'))");
res->println("    //  this.uniqueColumn = this.getAttribute('uniquecolumn');");
res->println("    ");
res->println("    var text = \"Select Value\";");
res->println("    if(this.myPlaceHolder.length > 0)");
res->println("      text=this.myPlaceHolder;");
res->println("    if(this.mySelectedValue.length > 0)");
res->println("      text=this.mySelectedValue;");
res->println("    ");
res->println("    // update the id of the div in the control");
res->println("    myHTML =  myHTML.replace(/jsc_text/g,text);");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("    myHTML =  myHTML.replace(/jsc_onshowfunc/g,onshowfunc);");
res->println("    this.innerHTML = myHTML;");
res->println("");
res->println("");
res->println("    console.log(\"this.mySelectedValue=\" + this.mySelectedValue);");
res->println("    this.myMenuItems = window[this.getAttribute('items')];");
res->println("");
res->println("");
res->println("    var onkeyfunc = \"document.getElementById('\" + this.getAttribute('id') + \"').buildList()\";");
res->println("    var myHTML = `          <input type=\"text\" placeholder=\"Search..\" id=\"jsc_id_input\" onkeyup=\"` + onkeyfunc + `\">`;");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("    document.getElementById(this.jsc_id + \"_div_dropdown\").innerHTML = myHTML;");
res->println("");
res->println("    this.buildList();");
res->println("");
res->println("");
res->println("");
res->println("");
res->println("  }");
res->println("");
res->println("  showDrop() {");
res->println("    document.getElementById(this.jsc_id + \"_div_dropdown\").classList.add(this.jsc_id + \"_show\");");
res->println("  }");
res->println("  selectValue(text) {");
res->println("    document.getElementById(this.jsc_id + \"_div_dropdown\").classList.remove(this.jsc_id + \"_show\");");
res->println("    document.getElementById(this.jsc_id + \"_button\").innerHTML = `${text}<i class=\"fa fa-angle-down\">`;");
res->println("    this.mySelectedValue=text;");
res->println("");
res->println("  }");
res->println("  buildList() {");
res->println("");
res->println("    var match = \"\";");
res->println("    if (document.getElementById(this.jsc_id + \"_input\") != 'undefined' && document.getElementById(this.jsc_id + \"_input\") != null)");
res->println("    {");
res->println("      match = document.getElementById(this.jsc_id + \"_input\").value;");
res->println("      match = match.toUpperCase();");
res->println("    }");
res->println("");
res->println("");
res->println("    // get drop down element");
res->println("    var cntnt = document.getElementById(this.jsc_id + \"_div_dropdown\");");
res->println("");
res->println("    // remove existing elements from dropdown");
res->println("    const elements = document.getElementsByClassName(this.jsc_id + \"_item\");");
res->println("    while (elements.length > 0) elements[0].remove();");
res->println("");
res->println("");
res->println("    var myHTML = '';");
res->println("");
res->println("    if(this.hasAttribute('items'))");
res->println("    {");
res->println("      ");
res->println("      for(var outer=0;outer<this.myMenuItems.length;outer++) {");
res->println("        var text = this.myMenuItems[outer][0];");
res->println("        var dbid = '';");
res->println("        var css = '';");
res->println("        var func = '';");
res->println("        if(this.myMenuItems[outer].length > 1)");
res->println("          dbid = this.myMenuItems[outer][1];");
res->println("");
res->println("        if(this.myMenuItems[outer].length > 2)");
res->println("          css =  this.myMenuItems[outer][2];");
res->println("");
res->println("        if(this.myMenuItems[outer].length > 3)");
res->println("          func = this.myMenuItems[outer][3];");
res->println("");
res->println("        if(dbid='')");
res->println("        {");
res->println("          dbid=text;");
res->println("        }");
res->println("        if(func=='')");
res->println("        {");
res->println("          func = `document.getElementById('${this.getAttribute('id')}').selectValue('${text}')`;");
res->println("        }");
res->println("        if(text.toUpperCase().indexOf(match) > -1 || match.length == 0) {");
res->println("          ");
res->println("          //var node = document.createElement(\"A\");");
res->println("          if(text == this.mySelectedValue)");
res->println("          text = text + `<i class=\"fa fa-check\"></i>`;");
res->println("          css = this.jsc_id + \"_item\" + \" \" + css;");
res->println("          myHTML+= `<a style=\"${css}\" dbid=\"${dbid}\" onclick=\"${func}\">${text}</a>`;");
res->println("");
res->println("        }");
res->println("      }");
res->println("    }");
res->println("    cntnt.innerHTML = myHTML;");
res->println("");
res->println("");
res->println("  }");
res->println("  setValue(text)");
res->println("  {");
res->println("    this.selectValue(text);");
res->println("    document.getElementById(this.jsc_id + \"_div_dropdown\").classList.remove(this.jsc_id + \"_show\");");
res->println("");
res->println("  }");
res->println("  getValue()");
res->println("  {");
res->println("    return this.mySelectedValue;");
res->println("  }");
res->println("");
res->println("");
res->println("}");
res->println("customElements.define('drop-down', class_DropDown);");
res->println("");
res->println("               ");
res->println("class class_TextBox extends HTMLElement {");
res->println("  connectedCallback() {");
res->println("    var myHTML = `");
res->println("      <style>");
res->println("        #jsc_id {");
res->println("          width: 100%;");
res->println("          box-sizing: border-box;");
res->println("          border: 2px solid var(--input-border-color);");
res->println("          border-radius: 4px;");
res->println("          font-size: var(--h4-text-size);");
res->println("          background-color: var(--input-bg-color);");
res->println("          padding: 1.2ch 2ch 1.2ch 2ch;");
res->println("          margin: var(--control-margin);");
res->println("        }");
res->println("      </style>");
res->println("      <input type=\"text\" id='jsc_id' name=\"jsc_name\" value=\"jsc_value\" placeholder=\"jsc_placeholder\">");
res->println("      `;");
res->println("                        ");
res->println("    this.jsc_id = jsc_AddObject();");
res->println("    console.log(this.jsc_id);");
res->println("");
res->println("");
res->println("    // update the id of the div in the control");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("    // update the name in the control");
res->println("    myHTML =  myHTML.replace(/jsc_name/g,this.getAttribute('name'));");
res->println("");
res->println("    // update the value in the control");
res->println("    if(this.hasAttribute('value'))");
res->println("      myHTML =  myHTML.replace(/jsc_value/g,this.getAttribute('value'));");
res->println("    else");
res->println("      myHTML =  myHTML.replace(/jsc_value/g,'');");
res->println("");
res->println("    if(this.hasAttribute('uuid'))");
res->println("        this.uuid = true;");
res->println("    else");
res->println("        this.uuid = false;");
res->println("");
res->println("    // update the placeholder text in the control");
res->println("    myHTML =  myHTML.replace(/jsc_placeholder/g,this.getAttribute('placeholder'));");
res->println("    ");
res->println("");
res->println("    // update any function calls back to this using parent");
res->println("    var parentElementString = \"document.getElementById('\" + this.getAttribute('id') + \"')\";");
res->println("    myHTML =  myHTML.replace(/jsc_parent/g,parentElementString);");
res->println("");
res->println("    this.innerHTML = myHTML;");
res->println("");
res->println("  }");
res->println("  getValue() {");
res->println("");
res->println("    return document.getElementById(this.jsc_id).value;");
res->println("  }");
res->println("  setValue(text) {");
res->println("    document.getElementById(this.jsc_id).value = text;");
res->println("  }");
res->println("");
res->println("  get text() {");
res->println("    return document.getElementById(this.jsc_id).value;");
res->println("");
res->println("  }");
res->println("  set text(value) ");
res->println("  {");
res->println("    document.getElementById(this.jsc_id).value = value;");
res->println("  }");
res->println("  ");
res->println("");
res->println("");
res->println("}");
res->println("customElements.define('text-box', class_TextBox);");
res->println("");
res->println("");
res->println("class class_SideBar extends HTMLElement {");
res->println("  connectedCallback() ");
res->println("  {");
res->println("    var myHTML = `");
res->println("      <style>");
res->println("");
res->println("        .jsc_id_button_div {");
res->println("          width: var(--side-bar-closed-width);");
res->println("          position: absolute;");
res->println("          top: 0;");
res->println("          left: 0px;");
res->println("          margin: 0px;");
res->println("          padding: 0px;");
res->println("          height: var(--title-bar-height);");
res->println("        }");
res->println("        .jsc_id_openbtn {");
res->println("          width: var(--side-bar-closed-width);");
res->println("          height: 100%;");
res->println("          font-size: var(--h4-text-size);");
res->println("          cursor: pointer;");
res->println("          background-color: var(--control-bg-color);");
res->println("          color: white;");
res->println("          border: none;");
res->println("          margin: 0px;");
res->println("          text-align: left;");
res->println("        }");
res->println("");
res->println("        .jsc_id_openbtn:hover {");
res->println("          background-color: var(--control-hover-color);");
res->println("          }");
res->println("  ");
res->println("");
res->println("        .jsc_id_sidebar {");
res->println("          height: 0%; ");
res->println("          width: var(--side-bar-closed-width);");
res->println("          position: absolute; ");
res->println("          z-index: 1; /* on top */");
res->println("          top: 0;");
res->println("          left: 0;");
res->println("          background-color: var(--control-bg-color);");
res->println("          overflow-x: hidden; /* no scroll */");
res->println("          overflow: hidden;");
res->println("          transition: 0.5s; ");
res->println("        }");
res->println("        .jsc_id_sidebar a, a:visited {");
res->println("          padding: 8px 8px 8px 32px;");
res->println("          text-decoration: none;");
res->println("          font-size: var(--h4-text-size);");
res->println("          color: var(--control-text-color);");
res->println("          display: block;");
res->println("          transition: 0.3s;");
res->println("        }");
res->println("");
res->println("        .jsc_id_sidebar a:hover {");
res->println("          background-color: var(--control-hover-color);");
res->println("        }");
res->println("  ");
res->println("");
res->println("        .jsc_id_closebtn  {");
res->println("          text-align: right;");
res->println("");
res->println("        }");
res->println("");
res->println("");
res->println("");
res->println("        /* smaller screens */");
res->println("        @media screen and (max-height: 450px) {");
res->println("          .jsc_id_sidebar {padding-top: 15px;}");
res->println("          .jsc_id_sidebar a {font-size: 18px;}");
res->println("        }");
res->println("      </style>");
res->println("      <div class=\"jsc_id_button_div\">");
res->println("        <button id=\"jsc_id_openbtn\" class=\"jsc_id_openbtn\" onclick=\"jsc_parent.open()\"><i class=\"fas fa-bars\"></i></button>");
res->println("      </div>");
res->println("      <div id=\"jsc_id\" class=\"jsc_id_sidebar\">");
res->println("      </div>");
res->println("    `;    ");
res->println("");
res->println("    this.jsc_id = jsc_AddObject();");
res->println("    ");
res->println("    // update the id of the div in the control");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("");
res->println("    // update any function calls back to this");
res->println("    var parentElementString = \"document.getElementById('\" + this.getAttribute('id') + \"')\";");
res->println("    myHTML =  myHTML.replace(/jsc_parent/g,parentElementString);");
res->println("    this.innerHTML = myHTML;");
res->println("");
res->println("    /////////////////////////////////");
res->println("    // Place text in button");
res->println("    this.myText = '';");
res->println("    if(this.hasAttribute('mytext'))");
res->println("    {");
res->println("      this.myText = this.getAttribute('mytext');");
res->println("      document.getElementById(this.jsc_id+ \"_openbtn\").innerHTML = this.myText;");
res->println("");
res->println("    }");
res->println("");
res->println("");
res->println("");
res->println("    ////////////////////////////////////");
res->println("    // Update HTML with Menu Items");
res->println("    myHTML = document.getElementById(this.jsc_id).innerHTML;");
res->println("    myHTML = `<a href=\"javascript:void(0)\" class=\"jsc_id_closebtn\" onclick=\"jsc_parent.close()\">&times;</a>`;");
res->println("    myHTML =  myHTML.replace(/jsc_parent/g,parentElementString);");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("    this.myMenuItems = '';");
res->println("    ");
res->println("    var closefunc = \"document.getElementById('\" + this.getAttribute('id') + \"').close()\";");
res->println("");
res->println("    if(this.hasAttribute('items'))");
res->println("    {");
res->println("      this.myMenuItems = window[this.getAttribute('items')];");
res->println("      ");
res->println("      for(var outer=0;outer<this.myMenuItems.length;outer++) {");
res->println("        var text = this.myMenuItems[outer][0];");
res->println("        var css = this.myMenuItems[outer][1];");
res->println("        var func = this.myMenuItems[outer][2];");
res->println("        myHTML=myHTML +  `<a href=\"#\" class=\"` + css + `\" onclick=\"` + func + `; ` + closefunc + `;\"> ` + text + `</a>`;  ");
res->println("      }");
res->println("    }");
res->println("    ");
res->println("    document.getElementById(this.jsc_id).innerHTML=myHTML;");
res->println("    ");
res->println("");
res->println("");
res->println("  }");
res->println("  open() {");
res->println("    document.getElementById(this.jsc_id).style.height = \"100%\";");
res->println("    document.getElementById(this.jsc_id).style.width = \"var(--side-bar-open-width)\";");
res->println("    var divsToHide = document.getElementsByClassName(\"jsc_viewport\"); ");
res->println("    for(var i = 0; i < divsToHide.length; i++){");
res->println("       var el = divsToHide[i];");
res->println("       el.style.marginLeft = \"250px\";");
res->println("    }");
res->println("    ");
res->println("  }");
res->println("  close() {");
res->println("    document.getElementById(this.jsc_id).style.height = \"0\";");
res->println("    document.getElementById(this.jsc_id).style.width = \"var(-side-bar-closed-width)\";");
res->println("    var divsToHide = document.getElementsByClassName(\"jsc_viewport\"); ");
res->println("    for(var i = 0; i < divsToHide.length; i++){");
res->println("       var el = divsToHide[i];");
res->println("       el.style.marginLeft = \"0px\";");
res->println("    }");
res->println("");
res->println("  }");
res->println("");
res->println("}");
res->println("customElements.define('side-bar', class_SideBar);");
res->println("");
res->println("");
res->println("class class_TitleBar extends HTMLElement {");
res->println("  connectedCallback() ");
res->println("  {");
res->println("    var myHTML = `");
res->println("      <style>");
res->println("");
res->println("        .jsc_id_div {");
res->println("          width: 100%;");
res->println("          position: absolute;");
res->println("          top: 0;");
res->println("          left: var(--side-bar-closed-width);");
res->println("          margin: 0px;");
res->println("");
res->println("          font-size: var(--h4-text-size);");
res->println("          height: var(--title-bar-height);");
res->println("          background-color: var(--control-bg-color);");
res->println("          color: var(--control-text-color);");
res->println("          ");
res->println("");
res->println("");
res->println("        }");
res->println("");
res->println("");
res->println("      </style>");
res->println("      <div class=\"jsc_id_div\">jsc_text</div>");
res->println("    `;    ");
res->println("");
res->println("    this.jsc_id = jsc_AddObject();");
res->println("    this.text = this.innerHTML;");
res->println("    // update the id of the div in the control");
res->println("    myHTML =  myHTML.replace(/jsc_id/g,this.jsc_id);");
res->println("    //myHTML =  myHTML.replace(/jsc_text/g,this.text);");
res->println("");
res->println("    // update any function calls back to this");
res->println("    var parentElementString = \"document.getElementById('\" + this.getAttribute('id') + \"')\";");
res->println("    myHTML =  myHTML.replace(/jsc_parent/g,parentElementString);");
res->println("");
res->println("    this.innerHTML = myHTML;");
res->println("");
res->println("    document.getElementById(this.getAttribute('id')).style.padding='20px;'");
res->println("    document.getElementById(this.getAttribute('id')).style.margin='0px;'");
res->println("    document.getElementById(this.getAttribute('id')).style.display='';");
res->println("    ");
res->println("");
res->println("");
res->println("  }");
res->println("  ");
res->println("");
res->println("}");
res->println("customElements.define('title-bar', class_TitleBar);");
res->println("");
res->println("                </script>");
res->println("                ");
res->println("    <script>");
res->println("");
res->println("                        Gauge1 = 10;");
res->println("                        setInterval(function() { ");
res->println("                                Gauge1+=10;");
res->println("                                if(Gauge1 > 254) ");
res->println("                                Gauge1=0; ");
res->println("                                   }");
res->println("                        , 1000);");
res->println("                        ");
res->println("      mySliderMenu = [");
res->println("        ['Home','fa fa-home','showHome()'],");
res->println("        ['Customers','fa fa-users','showCustomers()'],");
res->println("        ['Table','fa fa-users','showTable()'],");
res->println("        ['Settings','fa fa-cog','showSettings()'],");
res->println("        ];");
res->println("      myDropDown = [");
res->println("        ['DropDown 1',    0,  'fa fa-home', 'showHome()'],");
res->println("        ['DropDown 2',  1,'fa fa-users',  'showCustomers()'],");
res->println("        ['DropDown 3',  2,'fa fa-cog',  'showSettings()'],");
res->println("        ];");
res->println("");
res->println("");
res->println("        ");
res->println("      myStates = [[\"AL\"],[\"AK\"],[\"AZ\"],[\"AR\"],[\"CA\"],[\"CO\"],[\"CT\"],[\"DE\"],[\"FL\"],[\"GA\"],[\"HI\"],[\"ID\"],[\"IL\"],[\"IN\"],[\"IA\"],[\"KS\"],[\"KY\"],[\"LA\"],[\"ME\"],[\"MD\"],[\"MA\"],[\"MI\"],[\"MN\"],[\"MS\"],[\"MO\"],[\"MT\"],[\"NE\"],[\"NV\"],[\"NH\"],[\"NJ\"],[\"NM\"],[\"NY\"],[\"NC\"],[\"ND\"],[\"OH\"],[\"OK\"],[\"OR\"],[\"PA\"],[\"RI\"],[\"SC\"],[\"SD\"],[\"TN\"],[\"TX\"],[\"UT\"],[\"VT\"],[\"VA\"],[\"WA\"],[\"WV\"],[\"WI\"],[\"WY\"],[\"AS\"],[\"DC\"],[\"FM\"],[\"GU\"],[\"MH\"],[\"MP\"],[\"PW\"],[\"PR\"],[\"VI\"],[\"AE\"],[\"AA\"],[\"AE\"],[\"AE\"],[\"AE\"],[\"AP\"]];");
res->println("");
res->println("      function showSettings()");
res->println("      {");
res->println("        console.log('showSettings');");
res->println("      }");
res->println("      function SetZIP()");
res->println("      {");
res->println("        document.getElementById('zip').text='12345-1111';");
res->println("      }");
res->println("      function ClickSwitch(val)");
res->println("      {");
res->println("        alert(\"Switch Clicked \" + val);");
res->println("      }");
res->println("");
res->println("      ");
res->println("      /*  Show the main page first */");
res->println("      window.addEventListener(\"load\", function(){");
res->println("        jsc_show_divbyID(\"main\");");
res->println("  ");
res->println("      });");
res->println("      ");
res->println("    </script>");
res->println("");
res->println("    ");
res->println("      </head>");
res->println("");
res->println("    <body>");
res->println("    <side-bar id='navbar' pagediv_id='main' items='mySliderMenu' mytext='<i class=\"fas fa-bars\"></i>' ></side-bar>");
res->println("    <title-bar id='title-bar'></title-bar>");
res->println("");
res->println("");
res->println("");
res->println("        <div id=\"main\" class=\"jsc_viewport\">");
res->println("      <basic-button text='test' myonclick='SetZIP()' ></basic-button>");
res->println("      <drop-down id='dropdown' items='myDropDown' selectedval='DropDown 1'></drop-down>");
res->println("      <needle-gauge id='myCanvas' watch='Gauge1' value='0' name='Pressure' backcolor='grey' min='0' max='256' lowzoneend='64' lowzonecolor='orange' highzonestart='192' highzonecolor='red' normalcolor='green' width='200' height='200'></needle-gauge>");
res->println("");
res->println("            <h2>Collapsed Sidebar</h2>");
res->println("            <p>Content...</p>");
res->println("    </div>");
res->println("");
res->println("                ");
res->println("    <div id=\"view_customers\" class=\"jsc_viewport\" >");
res->println("      <basic-button text='New Customer' myonclick='showNewCustomers()' ></basic-button>");
res->println("      ");
res->println("    </div>");
res->println("");
res->println("    ");
res->println("");
res->println("    ");
res->println("    <div id=\"view_newcustomer\" class=\"jsc_viewport\" >");
res->println("      <text-box id='formCustomerID' name='id' dbCol='id' class='jsc_hidden' uuid='true' value='' ></text-box>");
res->println("      <text-box id='asdfasdg' name='Display Name' placeholder='Display Name' dbCol='name'></text-box>");
res->println("      ");
res->println("    </div>");
res->println("");
res->println("");
res->println("");
res->println("");
res->println("    <div id=\"view_table\" class=\"jsc_viewport\" >");
res->println("      <basic-button text='Get Data' myonclick='GetTable()' ></basic-button>");
res->println("      ");
res->println("    </div>");
res->println("  </body>");
res->println("</html>");
res->println("");

  // You can check if you are connected over a secure connection, eg. if you
  // want to use authentication and redirect the user to a secure connection
  // for that
  if (req->isSecure()) {
    //res->println("<p>You are connected via <strong>HTTPS</strong>.</p>");
  } else {
    //res->println("<p>You are connected via <strong>HTTP</strong>.</p>");
  }

 
}
void handle404(HTTPRequest * req, HTTPResponse * res) {
  req->discardRequestBody();
  res->setStatusCode(404);
  res->setStatusText("Not Found");
  res->setHeader("Content-Type", "text/html");
  res->println("<!DOCTYPE html>");
  res->println("<html>");
  res->println("<head><title>Not Found</title></head>");
  res->println("<body><h1>404 Not Found</h1><p>The requested resource was not found on this server.</p></body>");
  res->println("</html>");
}
